//============================================使用bootbox开发项目总结===================================//


一、如何给一个控件添加格式为yyyy-MM-dd格式的时间
var date = new Date();																//创建一个时间对象；
Y = date.getFullYear() + '-';														//获取时间的年
M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';	//获取时间对象的月份 如果小于10在前面加0，如果大于等于10则是原值
D = (date.getDate()-1 < 10 ? '0'+(date.getDate()-1) : date.getDate()-1) + ' ';		//获取时间对象的天 
//h = date.getHours() + ':';														//获取时间对象的时
//m = date.getMinutes() + ':';														//分
//s = date.getSeconds(); 															//秒
$("#timeID").html(Y+M+D);															//给页面控件 添加组合后的时间值			
//整合成为一个方法：
function getCurrentTime(){
	var date = new Date();																//创建一个时间对象；
	Y = date.getFullYear() + '-';														//获取时间的年
	M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';	//获取时间对象的月份 如果小于10在前面加0，如果大于等于10则是原值
	D = (date.getDate() < 10 ? '0'+(date.getDate()) : date.getDate()) + ' ';		//获取时间对象的天 
	h = date.getHours() + ':';														//获取时间对象的时
	m = date.getMinutes() + ':';														//分
	s = date.getSeconds(); 	
	return Y+M+D+h+m+s;
}
//参考方法（不建议使用）
function getNowTime(){
	var now = new Date();
	var year = now.getFullYear();       //年
	var month = now.getMonth()+1;     //月
	var day = now.getDate();            //日
	var tempTimes=year+'-'+month+'-'+day+' 00:00:00';
	return new Date(tempTimes.replace(/-/g,"/"));
}


二、给控件的属性赋值
	1、如果控件值指明了属性是 data-content 属性可以按照如下方法赋值：
	$(".popover-examples a").attr("data-content", "电话:"+data.phone);
	2、如果给指明控件的属性赋值方法无效，可以用浏览器F12 的调试方法查找正确的属性值，再进行赋值：
	控件中有title ，但是浏览器显示的实际属性值为 data-original-title
	$(".popover-examples a").attr("data-original-title", "值班人:"+data.user_name);
	
三、下拉多选控件
	1、应用相应的js文件
	<link rel="stylesheet" href="../resources/lib/multiSelect/bootstrap-select.min.css">
    <script src="../resources/lib/multiSelect/bootstrap-select.min.js"></script>
    <script src="../resources/lib/multiSelect/defaults-zh_CN.js"></script>
	2、页面控件 添加selectpicker类属性
	<select multiple data-live-search="false" class="selectpicker show-tick form-control" name="seleName" id="selectID" style="border: 0px">
        <option value="运维监控">运维监控</option>
        <option value="权限控制">权限控制</option>
        <option value="配置管理">配置管理</option>
        <option value="概览">概览</option>
        <option value="运维概览">运维概览</option>
        <option value="故障概览">故障概览</option>
    </select>
	3、下拉控件的赋值操作
	var full = $("#tableID").DataTable().row($(this).parents("tr")).data();			//获取当前选dataTable中行的数据
	var str = full.privilege;														//对应控件的对应值
    var arr=str.split(',');
    $('#selectID').selectpicker('val', arr);               							//调用回显函数  使值出现
	4、下拉控件重置事件
	$('#selectID').selectpicker('val', ''); 

	
四、form表单重置事件
	function reset(){
	$("#formID")[0].reset();	
	}

五、根据下拉选择的时间值来进行 刷新时间间隔调整
<select>
	<option value="1">1<option>
	<option value="2">2<option>
	<option value="5" selected>5<option>
</select>
//另一种格式
<select>
	<option>1<option>
	<option>2<option>
	<option selected>5<option>
</select>
		var time;
		var timer1;
		var timer2;
		//实时刷新方法中调用的方法
		function intimefresh() {
			$("#table").DataTable().draw();//点搜索重新绘制table。
		}
		//当选择不同时间值的时 运行此方法
		$(document).on("change","#simple",function(){
			//清除第二个 setInterval() 函数方法
			clearInterval(timer2);				
			//清除第一个 setInterval() 函数方法
			clearInterval(timer1);
			//重新获取时间值
			time = $("#simple").val();
			//定义并启动 第二个 setInterval() 函数方法
			timer2 = setInterval(intimefresh, time * 1000 * 60);
		});
		//第一次加载的时候对 time 值进行初始化
		$(document).ready(function() {		
			time = $("#simple").val();				//根据控件中的值来初始化时间
			//使用 setInterval()  函数来进行实时刷新
			/**
			*  注： 这里很有必要提示一下，虽然time是个变量，但是初始化后setInterval方法中 time的值相当于是个固定值5
			*           所以要在select控件的change事件中清楚 这个setInterval
			*/
			timer1 = setInterval(intimefresh, time * 1000 * 60);
		});

六、bootStrap 加载表格的方法
function initTable(url){
 var table = $("#table").dataTable({
          "createdRow": function ( row, data, index ) {
           var id=$("td", row).eq(0).html();
           var name=$("td", row).eq(1).html();
           var info='';
        	   info='<a href="jsp/res/tetra/BaseStationDetail.jsp?id='+id+'" class="btn btn-info  btn-xs" style="margin-left: 5px;" title="查看详细"> <span class="glyphicon  glyphicon-book" ></span></a>';
            //$('td', row).eq(7).html(''+info); @wuwp 隐藏工程状态列
        	   $('td', row).eq(6).html(''+info);
            $('td', row).eq(0).html('<input type="checkbox" class="checkbox" name="checkbox" value="'+id+'"/>');      
          },
            serverSide: true,//分页，取数据等等的都放到服务端去
            processing: false,//载入数据的时候是否显示“载入中”
            pageLength: 10,//首次加载的数据条数
            searching: false,//搜索
            ordering: false,//排序操作在服务端进行，所以可以关了
             ajax: {//类似jquery的ajax参数，基本都可以用。
                type: "get",//后台指定了方式，默认get，外加datatable默认构造的参数很长，有可能超过get的最大长度。
                url: url,
                dataSrc: "rows",//默认data，也可以写其他的，格式化table的时候取里面的数据
                data: function (d) {//d 是原始的发送给服务器的数据，默认很长。
                 var param = getSearchParam();
                    param.offset = d.start;//开始的序号
                    param.limit = d.length;//要取的数据的
                    return param;//自定义需要传递的参数。
                }
            }
          ,
            columns: [//对应上面thead里面的序列    
                { data: "device_id"},           
                { data: "sys_name"},
                { data: "ip_addr"},    
                { data: "city"},
                //@wuwp 隐藏工程状态列
                { data: "project_status","bVisible":false,"render": function(data, type, full) { 
                	if(data==0) return "在网运行";
                	if(data==1) return "工程状态";
                	if(data==2) return "临时退网";
                	else return "暂无";
                 }
                },
                { data: "vendor"},
                { data: "last_timestamp","render": function(data, type, full) { 
                	return data.substring(0,19);
                }      	
                },
                { data: "device_id"}//字段名字和返回的json序列的key对应
                /*{ data: "status","render": function(data, type, full) { 
                	if(data==true) return "成功";
                	else if(data==false) return "失败";
                 }},
                { data: "remark"},*/
            ],
            initComplete: function (setting, json) {
                $('#table td').nextAll().click(function(){
                	$(".selector1").find(".checkbox").prop('checked',false);
                	$(".selector1").removeClass("selector1");
                	$(this).parent().parent().find(".selector").find(".checkbox").prop('checked',false);
                    $(this).parent().parent().find(".selector").removeClass("selector");
                    $(this).parent().find(".checkbox").prop('checked',true);
                    $(this).parent().addClass("selector");  
                  });
            },
            language: {
                lengthMenu: '<select class="form-control input-xsmall">' + '<option value="5">5</option>' + '<option value="10">10</option>' + '<option value="20">20</option>' + '<option value="30">30</option>' + '<option value="40">40</option>' + '<option value="50">50</option>' + '</select>条记录',//左上角的分页大小显示。
               // lengthMenu:false,
                processing: "载入中",//处理页面数据的时候的显示
                paginate: {//分页的样式文本内容。
                    previous: "上一页",
                    next: "下一页",
                    first: "第一页",
                    last: "最后一页"
                },
                zeroRecords: "没有内容",//table tbody内容为空时，tbody的内容。
                //下面三者构成了总体的左下角的内容。
                info: '总共_PAGES_ 页，显示第_START_ 到第 _END_ ，共_TOTAL_ 条 ',//左下角的信息显示，大写的词为关键字。
                infoEmpty: "共0条记录",//筛选为空时左下角的显示。
                infoFiltered: ""//筛选之后的左下角筛选提示(另一个是分页信息显示，在上面的info中已经设置，所以可以不显示)，
            },
            lengthChange:true,
            paging: true
        });
 ｝

七、关于页面参数中存在汉字的转码功能
 case1、页面传参和 后台代码取参的方式
	在获取页面参数的时候添加 encodeURI();
		param.name = encodeURI(name);
	在后台代码中添加解码的方法：
		params.put("name", URLDecoder.decode((String) params.get("name"),"utf-8"));
		params 为后台处理业务的参数
 case2、页面传参 在另一个页面取参的转码		
	页面的转码格式：
	url= " urlName?paramType "+encodeURIComponent(encodeURIComponent(businessType));
	
	跳转页面获取url参数，现在java代码中将参数转码：
	<%
	String businessType=java.net.URLDecoder.decode(request.getParameter("businessType"),"UTF-8");
	%>    
    js获取参数：
	var businessType = "<%=businessType%>";


八、讨论页面的这个标签
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!DOCTYPE html>
前者会使页面出现滚动条，而后者不会

DOCTYPE标签是为了让浏览器按照w3c的统一格式对页面进行解析。而项目页面有html与jsp页面两种格式
个人觉得html页面使用第一种、jsp页面使用第二个


九、更换项目页面中的tomcat小图标
//网上的事例代码 放在<head></head>标签中
<link rel="shortcut icon" href="http://www.weather.com.cn/favicon.ico" type="image/x-icon" />
//bootStrap 项目页面的实例代码
<link rel="icon" href="resources/bootstrap/bootstrap-3.3.5/docs/favicon.ico">








十、bootstrap核心文件引用（一般在页面最后引用，保证页面先加载在加载对应的文件）
<!-- 新 Bootstrap 核心 CSS 文件 -->
<link rel="stylesheet" href="dist/css/bootstrap.min.css">
<!-- 可选的Bootstrap主题文件（一般不用引入） -->
<link rel="stylesheet" href="dist/css/bootstrap-theme.min.css">
<!-- jQuery文件。务必在bootstrap.min.js 之前引入 -->
<script src="jquery/jquery.min.js"></script>
<!-- 最新的 Bootstrap 核心 JavaScript 文件 -->
<script src="dist/js/bootstrap.min.js"></script>

十一、布局
1、栅格布局   (栅格系统必须放在container（居中）或container-fluid（铺满%）的容器中，保证其中的栅格布局有参照的对象)
<div class="cotainer">
	<div class="row">
		<div class="col-md-3"></div>
		<div class="col-md-9"></div>
	</div>
</idv>

			
十二、时间获取的方法 
		//获取 当前时间 + 你想要的日期
		function _getDateYear(addYear) {
            var dd = new Date();
            dd.setDate(dd.getYear()+addYear);//获取AddDayCount年后的日期
			/*
			dd.setDate(dd.getDate()+addYear);//获取AddDayCount天后的日期
			月的类推  -- 不想写在easyui里面了
			*/
            var y = dd.getFullYear();
            var m = dd.getMonth()+1;//获取当前月份的日期
            var d = dd.getDate();
            return y+"年"+m+"月"+d+"日24时";
        }			
			


			
	